sample1 = Tdata.train[which(fold!=v),2:9]
sample2 = Tdata.train[which(fold==v),2:9]
class1 = Tdata.train[which(fold!=v),1]
cvpred[which(fold==v),k] = knn(sample1,sample2,class1,k=k)
}
class = as.numeric(Tdata.train[,1])
# display misclassification rates for k=1:10
apply(cvpred,2,function(x) sum(class!=x)) # calcule l'erreur de classif
0.9*7542
#validation croisée
# 6-fold cross-validation to select k
# from the set {1,...,10}
fold = sample(rep(1:18,each=419)) # creation des groupes B_v
cvpred = matrix(NA,nrow=7542,ncol=10) # initialisation de la matrice
# des prédicteurs
for (k in 1:10)
for (v in 1:18)
{
sample1 = Tdata.train[which(fold!=v),2:9]
sample2 = Tdata.train[which(fold==v),2:9]
class1 = Tdata.train[which(fold!=v),1]
cvpred[which(fold==v),k] = knn(sample1,sample2,class1,k=k)
}
class = as.numeric(Tdata.train[,1])
# display misclassification rates for k=1:10
apply(cvpred,2,function(x) sum(class!=x)) # calcule l'erreur de classif
#validation croisée
# 6-fold cross-validation to select k
# from the set {1,...,10}
fold = sample(rep(1:6,each=1257)) # creation des groupes B_v
cvpred = matrix(NA,nrow=7542,ncol=10) # initialisation de la matrice
# des prédicteurs
for (k in 1:10)
for (v in 1:6)
{
sample1 = Tdata.train[which(fold!=v),2:9]
sample2 = Tdata.train[which(fold==v),2:9]
class1 = Tdata.train[which(fold!=v),1]
cvpred[which(fold==v),k] = knn(sample1,sample2,class1,k=k)
}
class = as.numeric(Tdata.train[,1])
# display misclassification rates for k=1:10
apply(cvpred,2,function(x) sum(class!=x)) # calcule l'erreur de classif
z=c(4,2,3)
min(z)
which.min(z)
v<-vector()
v
v<-vector()
v=c(4,2,6)
v
v<-vector()
v<-vector()
for (i in 1:100)
{
#validation croisée
# 6-fold cross-validation to select k
# from the set {1,...,10}
fold = sample(rep(1:6,each=1257)) # creation des groupes B_v
cvpred = matrix(NA,nrow=7542,ncol=10) # initialisation de la matrice
# des prédicteurs
for (k in 1:10)
for (v in 1:6)
{
sample1 = Tdata.train[which(fold!=v),2:9]
sample2 = Tdata.train[which(fold==v),2:9]
class1 = Tdata.train[which(fold!=v),1]
cvpred[which(fold==v),k] = knn(sample1,sample2,class1,k=k)
}
class = as.numeric(Tdata.train[,1])
# display misclassification rates for k=1:10
z=apply(cvpred,2,function(x) sum(class!=x)) # calcule l'erreur de classif
#normalement 7 le meilleur K
v[i]=which.min(z)
}
#prédiction par rpart
library(rpart)
head(algae)
algae[,a1]
algae[,"a1"]
v
v
v[1]
v[4]
v[12]
v[100]
z
which.min(z)
which(z == min(z))
#validation croisée
# 6-fold cross-validation to select k
# from the set {1,...,10}
fold = sample(rep(1:6,each=1257)) # creation des groupes B_v
cvpred = matrix(NA,nrow=7542,ncol=10) # initialisation de la matrice
# des prédicteurs
for (k in 1:10)
for (v in 1:6)
{
sample1 = Tdata.train[which(fold!=v),2:9]
sample2 = Tdata.train[which(fold==v),2:9]
class1 = Tdata.train[which(fold!=v),1]
cvpred[which(fold==v),k] = knn(sample1,sample2,class1,k=k)
}
class = as.numeric(Tdata.train[,1])
# display misclassification rates for k=1:10
z=apply(cvpred,2,function(x) sum(class!=x)) # calcule l'erreur de classif
#normalement 7 le meilleur K
v[i]=which(z == min(z))
v
z
for (i in 1:100)
{
#validation croisée
# 6-fold cross-validation to select k
# from the set {1,...,10}
fold = sample(rep(1:6,each=1257)) # creation des groupes B_v
cvpred = matrix(NA,nrow=7542,ncol=10) # initialisation de la matrice
# des prédicteurs
for (k in 1:10)
for (v in 1:6)
{
sample1 = Tdata.train[which(fold!=v),2:9]
sample2 = Tdata.train[which(fold==v),2:9]
class1 = Tdata.train[which(fold!=v),1]
cvpred[which(fold==v),k] = knn(sample1,sample2,class1,k=k)
}
class = as.numeric(Tdata.train[,1])
# display misclassification rates for k=1:10
z=apply(cvpred,2,function(x) sum(class!=x)) # calcule l'erreur de classif
#normalement 7 le meilleur K
v[i]=which(z == min(z))
}
v[1]
v[100]
v[4]
rt.signal = rpart(signal ~ ., data = Tdata.train[, 1:9])
par(lwd=2, bg="lemonchiffon3")
prettyTree(rt.signal,col="navy",bg="lemonchiffon")
rt.signal = rpart(signal ~ ., data = Tdata.train[, 1:9])
par(lwd=2, bg="lemonchiffon3")
prettyTree(rt.signal,col="navy",bg="lemonchiffon")
par(lwd=2, col="red")
plot(rt.signal, compress=TRUE)
text(rt.signal, use.n=TRUE,col="blue")
View(Tdata.eval)
rt.predictions.signal = predict(rt.signal, Tdata.eval)
View(rt.predictions.signal)
rt.predictions.signal = predict(rt.signal, Tdata.train)
View(rt.predictions.signal)
rt.predictions.signal = predict(rt.signal, Tdata.test)
for (i in 1:100)
{
#validation croisée
# 6-fold cross-validation to select k
# from the set {1,...,10}
fold = sample(rep(1:6,each=1257)) # creation des groupes B_v
cvpred = matrix(NA,nrow=7542,ncol=10) # initialisation de la matrice
# des prédicteurs
for (k in 1:10)
for (v in 1:6)
{
sample1 = Tdata.train[which(fold!=v),2:9]
sample2 = Tdata.train[which(fold==v),2:9]
class1 = Tdata.train[which(fold!=v),1]
cvpred[which(fold==v),k] = knn(sample1,sample2,class1,k=k)
}
class = as.numeric(Tdata.train[,1])
# display misclassification rates for k=1:10
z=apply(cvpred,2,function(x) sum(class!=x)) # calcule l'erreur de classif
#normalement 7 le meilleur K
v[i]=1
}
regr.eval(algae.sols[,"a1"],lm.prediction.a1,train.y=algae.sols[,"a1"])
v
v
v<-vector()
for (i in 1:10)
{
#validation croisée
# 6-fold cross-validation to select k
# from the set {1,...,10}
fold = sample(rep(1:6,each=1257)) # creation des groupes B_v
cvpred = matrix(NA,nrow=7542,ncol=10) # initialisation de la matrice
# des prédicteurs
for (k in 1:10)
for (v in 1:6)
{
sample1 = Tdata.train[which(fold!=v),2:9]
sample2 = Tdata.train[which(fold==v),2:9]
class1 = Tdata.train[which(fold!=v),1]
cvpred[which(fold==v),k] = knn(sample1,sample2,class1,k=k)
}
class = as.numeric(Tdata.train[,1])
# display misclassification rates for k=1:10
z=apply(cvpred,2,function(x) sum(class!=x)) # calcule l'erreur de classif
#normalement 7 le meilleur K
v[i]=1
}
v
x<-vector()
for (i in 1:10)
{
#validation croisée
# 6-fold cross-validation to select k
# from the set {1,...,10}
fold = sample(rep(1:6,each=1257)) # creation des groupes B_v
cvpred = matrix(NA,nrow=7542,ncol=10) # initialisation de la matrice
# des prédicteurs
for (k in 1:10)
for (v in 1:6)
{
sample1 = Tdata.train[which(fold!=v),2:9]
sample2 = Tdata.train[which(fold==v),2:9]
class1 = Tdata.train[which(fold!=v),1]
cvpred[which(fold==v),k] = knn(sample1,sample2,class1,k=k)
}
class = as.numeric(Tdata.train[,1])
# display misclassification rates for k=1:10
z=apply(cvpred,2,function(x) sum(class!=x)) # calcule l'erreur de classif
#normalement 7 le meilleur K
x[i]=1
}
x
#normalement 7 le meilleur K
x[i]=which.min(a)
x<-vector()
for (i in 1:10)
{
#validation croisée
# 6-fold cross-validation to select k
# from the set {1,...,10}
fold = sample(rep(1:6,each=1257)) # creation des groupes B_v
cvpred = matrix(NA,nrow=7542,ncol=10) # initialisation de la matrice
# des prédicteurs
for (k in 1:10)
for (v in 1:6)
{
sample1 = Tdata.train[which(fold!=v),2:9]
sample2 = Tdata.train[which(fold==v),2:9]
class1 = Tdata.train[which(fold!=v),1]
cvpred[which(fold==v),k] = knn(sample1,sample2,class1,k=k)
}
class = as.numeric(Tdata.train[,1])
# display misclassification rates for k=1:10
z=apply(cvpred,2,function(x) sum(class!=x)) # calcule l'erreur de classif
#normalement 7 le meilleur K
x[i]=which.min(z)
}
x
mode(x)
as.numerci(x)
as.numeric(x)
modde(x)
mode(x = )
mode(x =)
mode(x )
x
Mode(x)
install.packages("DescTools")
library(Desctools)
library(Desctools)
library(DescTools)
library(DescTools)
summary(x)
Mode(x )
x<-vector()
for (i in 1:100)
{
#validation croisée
# 6-fold cross-validation to select k
# from the set {1,...,10}
fold = sample(rep(1:6,each=1257)) # creation des groupes B_v
cvpred = matrix(NA,nrow=7542,ncol=10) # initialisation de la matrice
# des prédicteurs
for (k in 1:10)
for (v in 1:6)
{
sample1 = Tdata.train[which(fold!=v),2:9]
sample2 = Tdata.train[which(fold==v),2:9]
class1 = Tdata.train[which(fold!=v),1]
cvpred[which(fold==v),k] = knn(sample1,sample2,class1,k=k)
}
class = as.numeric(Tdata.train[,1])
# display misclassification rates for k=1:10
z=apply(cvpred,2,function(x) sum(class!=x)) # calcule l'erreur de classif
#normalement 7 le meilleur K
x[i]=which.min(z)
}
x
Mode(x)
rt.signal = rpart(signal ~ ., data = Tdata.train[, 1:9])
par(lwd=2, bg="lemonchiffon3")
prettyTree(rt.signal,col="navy",bg="lemonchiffon")
Tdata.eval[,1] = trading.signals(Tdata.eval[,1],0.1,-0.1)
names(Tdata.eval)[1] = "signal"
summary(Tdata.eval)
View(Tdata.eval)
View(Tdata.eval)
#prédiction par rpart
library(rpart)
rt.signal = rpart(signal ~ ., data = Tdata.train[, 1:9])
par(lwd=2, bg="lemonchiffon3")
prettyTree(rt.signal,col="navy",bg="lemonchiffon")
par(lwd=2, col="red")
plot(rt.signal, compress=TRUE)
text(rt.signal, use.n=TRUE,col="blue")
par(lwd=2, bg="lemonchiffon3")
prettyTree(rt.a1,col="navy",bg="lemonchiffon")
#Arbre de décision
rt.a1 = rpart(a1 ~ ., data = algae[, 1:12])
par(lwd=2, bg="lemonchiffon3")
prettyTree(rt.a1,col="navy",bg="lemonchiffon")
View(algae)
View(Tdata.eval)
algae[,a1]
algae[,signal]
algae[,"a1"]
Tdata.eval[,signal]
Tdata.eval[,"signal"]
View(Tdata.train)
Tdata.train[,1]
#prédiction par rpart
library(rpart)
rt.signal = rpart(signal ~ ., data = Tdata.train[, 1:9])
par(lwd=2, col="red")
plot(rt.signal, compress=TRUE)
par(lwd=2, col="red")
plot(rt.signal, compress=F)
rt.signal = rpart(signal ~ ., data = Tdata.train[, 1:9])
par(lwd=2, col="red")
plot(rt.signal, compress=T)
text(rt.signal, use.n=TRUE,col="blue")
par(lwd=2, bg="lemonchiffon3")
prettyTree(rt.a1,col="navy",bg="lemonchiffon")
(c) Pour évaluer la qualité de prévision :
lm.
par(lwd=2, bg="lemonchiffon3")
prettyTree(rt.a1,col="navy",bg="lemonchiffon")
par(lwd=2, bg="lemonchiffon3")
prettyTree(rt.a1,col="navy",bg="lemonchiffon")
#prédiction par rpart
library(rpart)
rt.signal = rpart(signal ~ ., data = Tdata.train[, 1:9])
par(lwd=2, bg="lemonchiffon3")
prettyTree(rt.a1,col="navy",bg="lemonchiffon")
par(lwd=2, bg="lemonchiffon3")
prettyTree(rt.a1,col="navy",bg="lemonchiffon")
rt.signal = rpart(signal ~ ., data = Tdata.train[, 1:9])
par(lwd=2, bg="lemonchiffon3")
prettyTree(rt.signal,col="navy",bg="lemonchiffon")
head(algae)
head(iris)
knn.predictions.signal=knn(Tdata.train[,2:9],Tdata.eval[,2:9],Tdata.train[,1],k=1)
head(knn.predictions.signal)
knn.predictions.signal
k=Mode(x)
k
i=Mode(x)
i
knn.predictions.signal=knn(Tdata.train[,2:9],Tdata.eval[,2:9],Tdata.train[,1],k=i)
i
table(knn.predictions.signal,Tdata.eval[,"signal"])
knn.predictions.signal=knn(Tdata.train[,2:9],Tdata.eval[,2:9],Tdata.train[,1],k=5)
table(knn.predictions.signal,Tdata.eval[,"signal"])
knn.predictions.signal=knn(Tdata.train[,2:9],Tdata.eval[,2:9],Tdata.train[,1],k=10)
table(knn.predictions.signal,Tdata.eval[,"signal"])
knn.predictions.signal=knn(Tdata.train[,2:9],Tdata.eval[,2:9],Tdata.train[,1],k=1)
table(knn.predictions.signal,Tdata.eval[,"signal"])
regr.eval(Tdata.eval[, "signal"], knn.predictions.signal, train.y = Tdata.eval[,"signal"])
regr.eval(Tdata.eval[, "signal"], knn.predictions.signal, train.y = Tdata.eval[,"signal"])
table(knn.predictions.signal,Tdata.eval[,"signal"])
summary(table(knn.predictions.signal,Tdata.eval[,"signal"]))
knn.predictions.signal=knn(Tdata.train[,2:9],Tdata.eval[,2:9],Tdata.train[,1],k=1)
i
knn.predictions.signal=knn(Tdata.train[,2:9],Tdata.eval[,2:9],Tdata.train[,1],k=i)
table(knn.predictions.signal,Tdata.eval[,"signal"])
regr.eval(Tdata.eval[, "signal"], knn.predictions.signal, train.y = Tdata.eval[,"signal"])
knn.predictions.signal=knn(Tdata.train[,2:9],Tdata.eval[,2:9],Tdata.train[,1],k=i)
table(knn.predictions.signal,Tdata.eval[,"signal"])
knn.predictions.signal=knn(Tdata.train[,2:9],Tdata.eval[,2:9],Tdata.train[,1],k=i)
t=table(knn.predictions.signal,Tdata.eval[,"signal"])
t
show(t)
summary(t)
t[1,1]
sum(t)
Erreur=(sum(t)-t[1,1]-t[2,2]-t[3,3])/sum(t)
Erreur
knn.predictions.signal
Erreur
#Arbre de décision
rt.a1 = rpart(a1 ~ ., data = algae[, 1:12])
par(lwd=2, bg="lemonchiffon3")
prettyTree(rt.a1,col="navy",bg="lemonchiffon")
#prédiction par l'arbre de décision
library(rpart)
rt.signal = rpart(signal ~ ., data = Tdata.train[, 1:9])
rt.prediction.signal=predict(rt.signal,Tdata.eval)
#prédiction par l'arbre de décision
library(rpart)
rt.signal = rpart(signal ~ ., data = Tdata.train[, 1:9])
rt.prediction.signal=predict(rt.signal,Tdata.eval)
regr.eval(Tdata.eval[,"signal"],rt.prediction.signal,train.y=Tdata.eval[,"signal"])
rt.prediction.signal
rt.prediction.a1=predict(rt.a1,test)
View(rt.prediction.signal)
View(rt.prediction.signal)
rt.prediction.a1
head(test)
head(algae.sols)
library(DMwR)
test.algae
head(test.algae)
rt.prediction.signal=predict(rt.signal,Tdata.eval)
regr.eval(Tdata.eval[,"signal"],rt.prediction.signal,train.y=Tdata.eval[,"signal"])
nrow(Tdata.eval[!complete.cases(algae),])
nrow(Tdata.eval[!complete.cases(Tdata.eval),])
nrow(Tdata.eval[!complete.cases(Tdata.eval),])
nrow(Tdata.eval[!complete.cases(Tdata.eval),])
rt.signal = rpart(signal ~ ., data = Tdata.train)
rt.prediction.signal=predict(rt.signal,Tdata.eval)
regr.eval(Tdata.eval[,"signal"],rt.prediction.signal,train.y=Tdata.eval[,"signal"])
rt.prediction.signal
rt.predictions.a1 = predict(rt.a1, algae)
rt.predictions.a1
View(algae)
View(Tdata.eval)
View(Tdata.train)
rt.signal = rpart(signal ~ ., data = Tdata.train)
rt.prediction.signal=predict(rt.signal,Tdata.eval)
regr.eval(Tdata.eval[,"signal"],rt.prediction.signal,train.y=Tdata.eval[,"signal"])
rt.prediction.signal
library(rpart.plot)
library(rpart.plot)
install.packages("rpart.plot")
library(rpart.plot)
library(rpart.plot)
data(ptitanic)
head(ptitanic)
head(ptitanic)
ptitanic
rt.signal = rpart(signal ~ ., data = Tdata.train)
rt.prediction.signal=predict(rt.signal,Tdata.eval,type="class")
regr.eval(Tdata.eval[,"signal"],rt.prediction.signal,train.y=Tdata.eval[,"signal"])
rt.prediction.signal
t=table(rt.prediction.signal,Tdata.eval[,"signal"])
t
Erreur=(sum(t)-t[1,1]-t[2,2]-t[3,3])/sum(t)
Erreur
sum(t)
1643/2430
rt.signal = rpart(signal ~ ., data = Tdata.train)
rt.prediction.signal=predict(rt.signal,Tdata.eval,type="class")
regr.eval(Tdata.eval[,"signal"],rt.prediction.signal,train.y=Tdata.eval[,"signal"])
t=table(rt.prediction.signal,Tdata.eval[,"signal"])
Erreur=(sum(t)-t[1,1]-t[2,2]-t[3,3])/sum(t)
t
rt.signal = rpart(signal ~ ., data = Tdata.train)
rt.prediction.signal=predict(rt.signal,Tdata.train,type="class")
regr.eval(Tdata.eval[,"signal"],rt.prediction.signal,train.y=Tdata.eval[,"signal"])
t=table(rt.prediction.signal,Tdata.eval[,"signal"])
Erreur=(sum(t)-t[1,1]-t[2,2]-t[3,3])/sum(t)
t
rt.signal = rpart(signal ~ ., data = Tdata.train)
rt.prediction.signal=predict(rt.signal,Tdata.eval,type="class")
regr.eval(Tdata.eval[,"signal"],rt.prediction.signal,train.y=Tdata.eval[,"signal"])
t=table(rt.prediction.signal,Tdata.eval[,"signal"])
Erreur=(sum(t)-t[1,1]-t[2,2]-t[3,3])/sum(t)
t
pt <- prune(rt.signal,cp=rt.signal$cptable[which.min(rt.signal$cptable[,4]),1])
prp(pt,extra=1)
rt.prediction.signal=predict(pt,Tdata.eval,type="class")
rt.prediction.signal
rt.prediction.signal=predict(pt,Tdata.eval)
rt.prediction.signal
#prédiction par l'arbre de décision
library(rpart)
rt.signal = rpart(signal ~ ., data = Tdata.train)
rt.prediction.signal=predict(rt.signal,Tdata.eval,type="class")
regr.eval(Tdata.eval[,"signal"],rt.prediction.signal,train.y=Tdata.eval[,"signal"])
t=table(rt.prediction.signal,Tdata.eval[,"signal"])
Erreur=(sum(t)-t[1,1]-t[2,2]-t[3,3])/sum(t)
t
prp(pt,extra=1)
prp(rt.signal,extra=1)
rt.signal = rpart(signal ~ ., data = Tdata.train)
rt.prediction.signal=predict(rt.signal,Tdata.eval,type="class")
regr.eval(Tdata.eval[,"signal"],rt.prediction.signal,train.y=Tdata.eval[,"signal"])
t=table(rt.prediction.signal,Tdata.eval[,"signal"])
Erreur=(sum(t)-t[1,1]-t[2,2]-t[3,3])/sum(t)
t
prp(rt.signal,extra=1)
candleChart(last(GSPC, "3 months"), theme = "white", TA = "addAvgPrice()")
candleChart(last(GSPC, "3 months"), theme = "white", TA = "addAvgPrice(on=1)")
candleChart(last(GSPC, "3 months"), theme = "white", TA = "addT.ind();addAvgPrice(on=1)")
median(HLC(GSPC))
medianPrice=function(p) apply(HLC(p),1,median)
addAvgPrice = newTA(FUN = avgPrice, col = 1, legend = "AvgPrice")
addMedianPrice=newTA(FUN=medianPrice,col="vert", legend="MedianPrice")
addT.ind = newTA(FUN = T.ind, col = "red", legend = "tgtRet")
get.current.chob<-function(){quantmod:::get.current.chob()}
candleChart(last(GSPC, "3 months"), theme = "white", TA = "addAvgPrice()")
candleChart(last(GSPC, "3 months"), theme = "white", TA = "addAvgPrice(on=1)")
candleChart(last(GSPC, "3 months"), theme = "white", TA = "addT.ind();addAvgPrice(on=1);addMedianPrice(on=1)")
medianPrice=function(p) apply(HLC(p),1,median)
addAvgPrice = newTA(FUN = avgPrice, col = 1, legend = "AvgPrice")
addMedianPrice=newTA(FUN=medianPrice,col="green", legend="MedianPrice")
addT.ind = newTA(FUN = T.ind, col = "red", legend = "tgtRet")
get.current.chob<-function(){quantmod:::get.current.chob()}
candleChart(last(GSPC, "3 months"), theme = "white", TA = "addAvgPrice()")
candleChart(last(GSPC, "3 months"), theme = "white", TA = "addAvgPrice(on=1)")
candleChart(last(GSPC, "3 months"), theme = "white", TA = "addT.ind();addAvgPrice(on=1);addMedianPrice(on=1)")
